// For fixed H in P3, tests sequence
//
// B(d,L,C,A,B), where
//
// d: degree of forms vanishing along:
//    L free lines
//    C crosses (two intersecting lines), points of intersection lying in H
//    (A,B) sub-star configuration in H based on A lines with B missed points
//
// specialization:
//
// l free lines specialized into H
// s sundial type specializations (sundial produced from two lines, point of intersection specialized to H)
// h half of crosses specialized into H
// c crosses specialized into H
//
proc residualP3(list in, int l, s, h, c) {
// input list = d, L, C, A, B
// output list = the same as input
  list out;
  out[1]=in[1]-1;
  out[2]=in[2]-l-2*s+h;
  out[3]=in[3]+s-c-h;
  out[4]=l+2*c+h;
  out[5]=c;
  return(out);
}
proc edim(list in) {
  int ed=(in[1]+1)*(in[1]+2)*(in[1]+3) div 6-(in[2]+in[3])*(in[1]+1)-in[3]*in[1]-in[4]*(in[4]-1) div 2+in[5];
  return(ed);
}
proc writescheme(list in) {
"B(degree;L,C,A,B)=B("+string(in[1])+";"+string(in[2])+","+string(in[3])+","+string(in[4])+","+string(in[5])+")";
}
proc isonlist(list in) {
  int ison=0;
  list l;
  for (int i=1;i<=size(searchlist);i++) {
    l=searchlist[i];
    if ((in[1]==l[1])&&(in[2]==l[2])&&(in[3]==l[3])&&(in[4]==l[4])&&(in[5]==l[5])) {ison=1;}
  }
  return(ison);
}
proc search(list in) {
  ""; "list of all possible residual subschemes for B(degree,L,C,A,B)="+"B("+string(in[1])+";"+string(in[2])+","+string(in[3])+","+string(in[4])+","+string(in[5])+")"; "";
  searchlist[1]=in;
  int cs=0;
  int ms=1;
  int maxl,maxs;
  int edold,ednew;
  int l,s,h,c;
  list newl;
  while (cs<ms) {
    cs++;
    in=searchlist[cs];
    maxl=in[1];
    if (in[2]<maxl) {maxl=in[2];}
    maxs=maxl div 2;
    edold=edim(in);
    for (l=0;l<=maxl;l++) {
      for (s=0;s<=maxs;s++) {
        for (h=0;h<=in[3];h++) {
          for (c=0;c<=in[3];c++) {
            if ((l+2*s<=maxl)&&(h+c<=in[3])&&(in[1]>=2)) {
              newl=residualP3(in,l,s,h,c);
              ednew=edim(newl);
              if (((edold<=ednew)&&(ednew<=0))||((0<=ednew)&&(ednew<=edold))) {
                if (isonlist(newl)==0) {
                  ms++;
                  searchlist[ms]=newl;
                  writescheme(newl);
                  "vdim = "+string(ednew);
				  "";
                }
              }
            }
          }
        }
      }
    }
  }
}
ring R=0,k,dp;
list searchlist;
list setup=9,14,4,4,2;
//procedure search lists all possible residual subschemes for "setup" configuration on the list searchlist
search(setup);
exit;
